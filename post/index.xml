<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on A Traveller in Space and Time</title>
    <link>http://traveller42.github.io/post/</link>
    <description>Recent content in Posts on A Traveller in Space and Time</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Sun, 10 Apr 2016 21:06:13 -0400</lastBuildDate>
    <atom:link href="http://traveller42.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Relative Performance</title>
      <link>http://traveller42.github.io/post/relative-performance/</link>
      <pubDate>Sun, 10 Apr 2016 21:06:13 -0400</pubDate>
      
      <guid>http://traveller42.github.io/post/relative-performance/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been quite impressed with the performance of the Chromebook that has
become my primary portable system.  It is an Acer Chromebook 11 C740.  The CPU
is a dual-core Celeron 3205U running at a nominal 1.5 GHz.  It has 4 GB of RAM
and a 256 GB SSD drive.  I&amp;rsquo;m running this system in Developer mode which gives
shell access.  I&amp;rsquo;ve created a chroot that is running a current version of
Ubuntu.  This is running within the ChromeOS system.  I decided to do some
testing to see what the real values were.  This is the &lt;strong&gt;new&lt;/strong&gt; system.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;big&lt;/strong&gt; system was custom built a few years ago and has multiple spinning
disks, the smallest of which is 400 GB, and 16 GB of RAM.  The CPU is an
eight-core AMD FX-8120.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;old&lt;/strong&gt; system is a Dell Insprion E1405 purchsed nearly 9 years ago.  The CPU
is a dual-core Core 2 Duo T7200 running at a nominal 2.0 GHz.  It has 3.2 GB of
RAM and a 320 GB spinning disk.  This has become my primary desktop as its
hinge has broken and it is no longer usable as a laptop.&lt;/p&gt;

&lt;h1 id=&#34;michi-go:6f0f4fc41711cf4e87e48dead024b7b0&#34;&gt;Michi-Go&lt;/h1&gt;

&lt;p&gt;The process that got my attention is a program I translated from Python to the
Go language that plays the Go game.  This program reads a couple of large files
once at the start, but is processor-bound for the rest of execution.&lt;/p&gt;

&lt;p&gt;There are a couple benchmark test built into the program.  The first,
mcbenchmark, reads the pattern files and then does 20 playouts of the initial,
empty, board.  This benchmark is single-threaded.  The second, tsbenchmark, starts
with the initial, empty, board and generates a move.  This requires 1400 playouts
in the current version of the program.  This benchmark is multi-threaded.&lt;/p&gt;

&lt;p&gt;The results for this set of test are:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;System&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mcbenchmark&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;tsbenchmark&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Old&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.689s&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28,584s&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;New&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.452s&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.709s&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Big&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.966s&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.802s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;There is some indication that the Chromebook, new system, may be faster per thread
in the &lt;strong&gt;tsbenchmark&lt;/strong&gt; than the big system.  I&amp;rsquo;ll need to look at this in more
detail.&lt;/p&gt;

&lt;h1 id=&#34;unix-bench:6f0f4fc41711cf4e87e48dead024b7b0&#34;&gt;Unix Bench&lt;/h1&gt;

&lt;p&gt;This is an old series of benchmarks used to evaluate the relative performance of
servers.  This is version 5.1.3 of the Byte Unix Benchmarks.  I&amp;rsquo;m only reporting
the overall score for each system.  The default is to do a single-threaded run
and a multi-threaded run with the number of parallel processes equal to the
number of cores available.&lt;/p&gt;

&lt;p&gt;These are the results:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;System&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1 thread&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2 threads&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8 threads&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Old&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;671.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1312.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;New&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;777.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1495.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Big&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;832.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2169.1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I should probably try to fill in some of the gaps in this data to better
understand the differences in the operation of these three systems.&lt;/p&gt;

&lt;h1 id=&#34;conclusions:6f0f4fc41711cf4e87e48dead024b7b0&#34;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;Not too much to draw at present, but one thing is pretty clear:  The modern
Celeron is better than the old mobile Core 2 Duo, even at a slower clock speed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Connecting the Display</title>
      <link>http://traveller42.github.io/post/connecting-the-display/</link>
      <pubDate>Sat, 09 Apr 2016 21:31:42 -0400</pubDate>
      
      <guid>http://traveller42.github.io/post/connecting-the-display/</guid>
      <description>&lt;p&gt;Not much progress today.  The LCD I am using for the display on the head unit
requires a mini USB connector.  I only have micro USB connectors right now.
Getting the initial connection with the new LCD display will have to wait.&lt;/p&gt;

&lt;p&gt;The USB connector for the ezLCD display I am using provides power, control, and
access to storage for fonts and images directly in the display.&lt;/p&gt;

&lt;p&gt;There is another connector that can be used using direct serial access.  This
connector can also provide power.  It uses a specific connector and provides
many other capabilities, but this will require custom programming to leverage.&lt;/p&gt;

&lt;p&gt;Current plan is to use USB.  I will also create a library to make interfacing
with the display easier.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Connectivity</title>
      <link>http://traveller42.github.io/post/connectivity/</link>
      <pubDate>Fri, 08 Apr 2016 20:28:38 -0400</pubDate>
      
      <guid>http://traveller42.github.io/post/connectivity/</guid>
      <description>

&lt;p&gt;Our ubiquitous data connectivity is a great thing.  We don&amp;rsquo;t appreciate just
how useful it is, and how much we depend on it, until we arrive in a place
where it does not work.  We had an issue with cellular access on our last trip
to Canada. This has caused me to think about data connectivity experiences I
have ad over the years.&lt;/p&gt;

&lt;h1 id=&#34;canada-2016:3da81cfe3cf668bf89943c6f09290afd&#34;&gt;Canada (2016)&lt;/h1&gt;

&lt;p&gt;While we were very late in acquiring smartphones, we use this
connection all the time.  Due to various changes in agreements between cellular
companies, we did not coverage in Canada on our recent trip.  We were back to
finding open Wifi networks to use.  Luckily, the service centers on the 401 had
Wifi available that mostly worked.&lt;/p&gt;

&lt;h1 id=&#34;northern-plains-2015:3da81cfe3cf668bf89943c6f09290afd&#34;&gt;Northern Plains (2015)&lt;/h1&gt;

&lt;p&gt;Our wireless data provider doesn&amp;rsquo;t have coverage in the Northern Plains.  Our
agreement allows roaming for voice and messages, but not for data.  This
required finding a Mifi, or cellular hotspot, device that worked in this area.
Even with the new device, there were places with no coverage at all.&lt;/p&gt;

&lt;h1 id=&#34;mississippi-2005:3da81cfe3cf668bf89943c6f09290afd&#34;&gt;Mississippi (2005)&lt;/h1&gt;

&lt;p&gt;After Katrina hit the Mississippi Gulf Coast, I was part of the recovery
effort. When I arrived, there were no phones, no cellular coverage, unstable
power, and unsafe water.  Shortly after I arrived, there started to be some
cellular coverage as they got towers back in service.  As part of the support
offered to folks who were displaced, most of the people in the shelters had
cell phones.  This led to the working towers getting saturated immediately
after they became available.  Our team was using Amateur Radio for our internal
communications.  While I could not make a call, I was able to connect using
cellular packet data which used available time on the control channel.  This
was slow (roughly 600 bits per second), but I could use it to access my online
account using a text-based connection and read mail using a text-based program.&lt;/p&gt;

&lt;h1 id=&#34;down-under-1999:3da81cfe3cf668bf89943c6f09290afd&#34;&gt;Down Under (1999)&lt;/h1&gt;

&lt;p&gt;During our vacation in Australia, New Zealand, and Fiji; my wife and I were
able to stay in contact back home through the use of Internet Cafes.  They were
all over and allowed the use a computer and its connection to Internet.  Most
also served coffee, tea, and similar fair.  Some were clearly a coffee shop
that had installed a couple computers in the back and sold their use as another
service.  This connection allowed us to get a request to represent an award
nominee at a convention we were attending later that month.  We were able to
agree to be the representative and have time to find appropriate clothes as we
had not expected to need the more formal wear.&lt;/p&gt;

&lt;h1 id=&#34;mississippi-1987:3da81cfe3cf668bf89943c6f09290afd&#34;&gt;Mississippi (1987)&lt;/h1&gt;

&lt;p&gt;While I was in training as a repair technician at Keesler Air Force Base, I
bought my first computer.  The only phones we had were payphones in the day
room in the barracks.  These took a dime, had a rotary dial, and a short cord
on the handset.  When I wanted to connect to a BBS, I would take the coffee
table from the day room to my room.  I would put my computer on the table. Once
someone came down the hall, I would get their help to move the table back to
the day room under the payphone.  I would pay my dime, dial my number, and wait
for the screech that as the start-up signal for the BBS modem.  I would then
place the handset in the cups of the acoustic coupler I had attached to the
computer,&lt;/p&gt;

&lt;p&gt;I have watched normal data access go from 300 bits per second to over 30
million bits per second in the last 30 years.  Wireless data wasn&amp;rsquo;t widely
available until well into the 90s and we now have wireless speeds over a
million bits per second.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Image to Start With</title>
      <link>http://traveller42.github.io/post/what-image-to-start-with/</link>
      <pubDate>Thu, 07 Apr 2016 21:38:03 -0400</pubDate>
      
      <guid>http://traveller42.github.io/post/what-image-to-start-with/</guid>
      <description>

&lt;h1 id=&#34;decisions-decisions-decisions:59d6925dffdfb128a2dff6cc70730079&#34;&gt;Decisions, Decisions, Decisions&lt;/h1&gt;

&lt;p&gt;Since a single system image OS is not a viable options, I need to decide what
system image to start with.&lt;/p&gt;

&lt;p&gt;As interesting as Plan 9 is, I think I will wait an look at that one after I
have more experience with the capabilities of the more travelled path.&lt;/p&gt;

&lt;p&gt;I will use a Linux load of some kind.  This environment is very efficient and I
am very familiar with building and maintaining system using Linux.  This
narrows the choice down to two main alternatives: Raspbian and Arch.&lt;/p&gt;

&lt;h1 id=&#34;raspbian:59d6925dffdfb128a2dff6cc70730079&#34;&gt;Raspbian&lt;/h1&gt;

&lt;p&gt;The most popular load of the Raspberry Pi series is Raspbian, a derivative of
the Debian Linux family.  This is not much of a surprise as Raspbian is
designed to support the primary goal of the Raspberry Pi program, education.
It is quite friendly in its implementation.  It presents a graphical desktop,
includes many applications in the base load, and uses the same Apt package
management tools as Ubuntu, another Debian derivative.  The current release
supports all variants of the Raspberry Pi from the original ARMv6 models to
the most recent ARMv8 model.  This consistency will simplify configuration
and could allow using some of the older devices I have with the nodes in the
cluster.  The current version of Raspbian is based on the Debian Jessie
release.  There is also a Raspbian Jessie Lite image that has only the base
OS and a minimal set of tools.  These can be used to the nodes other than the
head node.  (It can also be used for the head node once I know what I want
packages I want to use.)&lt;/p&gt;

&lt;h1 id=&#34;arch:59d6925dffdfb128a2dff6cc70730079&#34;&gt;Arch&lt;/h1&gt;

&lt;p&gt;Arch Linux on ARM (ALARM) is another option.  Arch uses a different image for
the original models of Raspberry Pi and the new models, 2 and 3.  This starts
as a minimal collection of tools expecting the user to install those items
needed for the task at hand.  This project requires more knowledge of Linux
than Raspbian which shouldn&amp;rsquo;t be a major issue for me.  It also uses a
different package management tool, pacman, that I do not have experience with.
There will be more building of tools from source, but that also allows more
control.  This may eventually lead to a better system and improved performance
relative to Raspbian.  It might be easier to adapt a 64-bit kernel using Arch
as a basis.&lt;/p&gt;

&lt;h1 id=&#34;current-plan:59d6925dffdfb128a2dff6cc70730079&#34;&gt;Current Plan&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve downloaded each of the images available.  I will create a boot image for
each and see what that looks like.  I will use that review to guide where I go
next.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Do You Do With a Portable Supercomputer?</title>
      <link>http://traveller42.github.io/post/what-do-you-do-with-a-portable-supercomputer/</link>
      <pubDate>Wed, 06 Apr 2016 23:59:59 -0400</pubDate>
      
      <guid>http://traveller42.github.io/post/what-do-you-do-with-a-portable-supercomputer/</guid>
      <description>&lt;p&gt;While I wait for the replacement cables, I can spend some time
thinking about what I will actually do with this portable
supercomputer once I have it up and running.&lt;/p&gt;

&lt;p&gt;To start, the portable supercomputer is a cluster of 4 nodes in a
single, small frame with integrated power and internal network.
Each node of this cluster is a Raspberry Pi 3 B, so calling it a
supercomputer is a bit of a stretch.  The important thing is that
each of these systems has separate memory and storage.  All nodes
are connected together with a network switch.  The head node will
use it internal wifi or a USB network adapter for connections with
external systems.  The only required physical connection will be
power.&lt;/p&gt;

&lt;p&gt;My first idea was to create a distributed build environment.
There used to be a distributed make that would spread the work out
over multiple cooperating systems.  This seems to have
disappeared.  Another take on this was some kind of single system
image configuration.  There was a system called Amoeba that
managed processes over multiple compute resources, but there has
been no recent work on it.  There are a few systems that appear to
be similar, but they are only supported on x86 architecture CPUs.
In this space is Plan 9 from Bell Labs.  There is a port of Plan 9
to the RPi environment.  It is currently 32-bit and not really
single system image, but it is interesting, designed for a
distributed computing environment, and light weight.  Plan 9 is
definitely worth considering as a path of investigation using this
cluster.&lt;/p&gt;

&lt;p&gt;Another possibility is to create a Hadoop cluster.  This is an
important framework in the big data space and learning more about
it will be beneficial.  There are walk-throughs and tutorials for
the RPi environment, so the initial cycle could be quite easy. I
may do this as it has such a low bar to entry.  Next steps would
depend on what I want to do and if a Hadoop environment is the
appropriate place to do it.  Just adding another tool for the
toolkit is good enough.&lt;/p&gt;

&lt;p&gt;Finally, I&amp;rsquo;m considering doing something like a Beowulf cluser.
The task in this case would be to investigate parallel
programming.  A tool for this investigation would be to see how to
distribute the simulations used in the Go (game) program I wrote
Go (language) across the cluster.  Learning what contributes to
any improvement and what blocks improvement would be the purpose
here.  As a systems guy, I would want to know how I can tell what
my limiting resource is.  Am I constrained by the limited
compute power, the lack of memory, or the slow network?  What is
the improvement curve.  How linear, or not, is it?&lt;/p&gt;

&lt;p&gt;Regardless of which of these, if any, I work on, I plan to see if
I cannot make a 64-bit ARM version of a current Linux kernel run
on this hardware.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Measure Twice</title>
      <link>http://traveller42.github.io/post/measure-twice/</link>
      <pubDate>Tue, 05 Apr 2016 23:57:24 -0400</pubDate>
      
      <guid>http://traveller42.github.io/post/measure-twice/</guid>
      <description>

&lt;h1 id=&#34;measure-twice-cut-order-once:d8b76d1b66f429937aec64249c3d9e10&#34;&gt;Measure Twice; &lt;del&gt;Cut&lt;/del&gt; Order Once&lt;/h1&gt;

&lt;p&gt;While assembling my portable supercomputer, I discovered that the cables I
had ordered were too short.  I had neglected to allow for the strain-reliefs
at each end and the need to not stress the sockets these cables are plugged
into.  I should have used the longer cables I have to determine the length I
needed before ordering all the cables for the project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bad Ideas</title>
      <link>http://traveller42.github.io/post/bad-ideas/</link>
      <pubDate>Mon, 04 Apr 2016 23:59:59 -0400</pubDate>
      
      <guid>http://traveller42.github.io/post/bad-ideas/</guid>
      <description>

&lt;h2 id=&#34;bad-ideas:aec35b56d95e3a3d35159fa91aa48dfb&#34;&gt;Bad Ideas&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Trying to launch a two-years dormant VM on a current version of
VirtualBox on a 7 year old computer that is definitely showing
its age.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was prompted by a change in policy by Code 42 Software, the
owners of CrashPlan, a very good backup program and service.
The new policy is to delete cloud repositories for computers that
have not connected in over 6 months.  This is only an issue as I
have a couple of Windows VMs that I keep for the rare times I need
a Windows environment.  Each of these VMs has not been active in
two years as I have had no need to run a program on Windows in that
time.&lt;/p&gt;

&lt;p&gt;Unfortunately, there are a couple resources that I would like to
maintain that require Windows.  Therefore, I decided to launch one
of the VMs and update the CrashPlan software and let it refresh the
repository.  It has now been trying to launch the VM for almost an
hour.  It has also effectively locked up the GUI for the old computer.&lt;/p&gt;

&lt;p&gt;This is being composed on my Chromebook where I have duplicated the
git repo for the site.  I should document the steps needed as someone
may want to do it again some day.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to leave the poor system trying to run the VM.  Hopefully, I
can either log into a shell, or get control back on the GUI enough to
shutdown the VM.  I do have a good backup, so I could just move the
data.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Root</title>
      <link>http://traveller42.github.io/post/hugo-root/</link>
      <pubDate>Sun, 03 Apr 2016 23:40:35 -0400</pubDate>
      
      <guid>http://traveller42.github.io/post/hugo-root/</guid>
      <description>&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; Hugo doesn&amp;rsquo;t do anything with a file that it hasn&amp;rsquo;t been told how to handle.&lt;/p&gt;

&lt;p&gt;I host the source for this blog in a &lt;a href=&#34;https://github.com/traveller42/traveller42.github.io&#34;&gt;Github repository&lt;/a&gt;.  Github will place a
notice suggesting a Readme if one doesn&amp;rsquo;t exist.  In general, this is a good idea.&lt;br /&gt;
It let&amp;rsquo;s the developer describe what the code hosted in the repository is intended
to do or support.  It can be used as initial documentation for a small project and
a jumping-off point for a larger project.&lt;/p&gt;

&lt;p&gt;I have now added such a file to the source branch of my blog repository.  The real
reason for this is to test what will happen with files created in the source root.
My next task is to create a deploy script.  Now, I know I can just leave it in the
source root.  This helps to keep things simple.&lt;/p&gt;

&lt;p&gt;This script won&amp;rsquo;t do much.  It is only a few steps and I have been doing them from
memory since the first build.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>It Takes Three</title>
      <link>http://traveller42.github.io/post/tcp/</link>
      <pubDate>Sat, 02 Apr 2016 23:10:04 -0400</pubDate>
      
      <guid>http://traveller42.github.io/post/tcp/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve always heard that the best way to really understand something is to explain
it to someone else.  Today, I learned a related truth:  &lt;em&gt;Trying&lt;/em&gt; to explain something
to another is a good way to find out what you &lt;em&gt;do not&lt;/em&gt; know.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been dealing with data communications for pretty much my entire professional
career.  I understand how a signal travels along a wire, and have used this to find
where that wire is broken.  I have tapped serial lines for gather data in parallel
with the primary system.  I once was able to get an ancient mainframe and a PC to
communicate when much more experienced consultants had declared it wasn&amp;rsquo;t possible.
I&amp;rsquo;ve deployed, monitored, analyzed IP networks.  I&amp;rsquo;ve written programs that operated
at all levels of the stack.  If asked, I would have said I had a firm grasp of the
low-level operation of the Transmission Control Protocol (TCP).&lt;/p&gt;

&lt;p&gt;Today was the first time I had tried to explain the initiation of a TCP connection.
I knew it used a three-way handshake.  I could recognized the handshake when looking
at a packet trace.  I just never thought about it.  I knew it could break.  I knew the
effects of a break, deliberate or otherwise.  I&amp;rsquo;ve always had this part handled by
a library call, so I never had to implement it myself.  It just worked, or it didn&amp;rsquo;t.
I could handle either case in my code.  I never had to work with the steps in
isolation.&lt;/p&gt;

&lt;p&gt;I was asked about the details of the initiation of a TCP connection by another
computer programmer with experience with using networks, but not with network programming.
I got several things wrong and created much confusion before actually getting the
gist of the process explained and the knowledge successfully imparted.&lt;/p&gt;

&lt;p&gt;Since I was reviewing packet traces today, I had plenty of opportunity to look at
the process as implemented.&lt;/p&gt;

&lt;p&gt;[If you truly have a solid understanding of the three-way handshake, you can stop
reading now.]&lt;/p&gt;

&lt;p&gt;The TCP Three-way handshake
1. SYN from client
2. SYN-ACK from Server
3. ACK from client&lt;/p&gt;

&lt;p&gt;The SYN flag is set to indicate that the packet includes the starting sequence number
from the client.  The SYN-ACK acknowledges the receipt of the previous packet and
includes the starting sequence number from the server.  The client then sends an ACK to
indicate that it has received the packet.  From this point on, all packets between
the client and the server should have the ACK flag set.&lt;/p&gt;

&lt;p&gt;The Wikipedia &lt;a href=&#34;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&#34;&gt;page on TCP&lt;/a&gt;
, as usual, has more detail than most of us will ever need on TCP and the details of
the three-way handshake to start the connection and the &lt;strong&gt;four-way&lt;/strong&gt; handshake for tearing
down the connection.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Start of a New Blog</title>
      <link>http://traveller42.github.io/post/start/</link>
      <pubDate>Fri, 01 Apr 2016 23:04:47 -0400</pubDate>
      
      <guid>http://traveller42.github.io/post/start/</guid>
      <description>

&lt;h1 id=&#34;building-a-portable-supercomputer:e35225681628e09bab23f7b8fd7299b1&#34;&gt;Building a Portable Supercomputer&lt;/h1&gt;

&lt;p&gt;While I am starting on April 1, this is actually something I am working on.&lt;/p&gt;

&lt;h1 id=&#34;hugo:e35225681628e09bab23f7b8fd7299b1&#34;&gt;Hugo&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m using &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; to generate these pages.  This is actually
the second site I&amp;rsquo;ve created using Hugo.  The first is a &lt;a href=&#34;http://traveller42.github.io/ogs-notifier/&#34;&gt;site&lt;/a&gt; for a Chrome
Extension I support.&lt;/p&gt;

&lt;p&gt;Once everything is in place, this is quick and easy to maintain.  However, there
are many fiddly bits that need to accounted for before it all works as desired.&lt;/p&gt;

&lt;h1 id=&#34;github:e35225681628e09bab23f7b8fd7299b1&#34;&gt;Github&lt;/h1&gt;

&lt;p&gt;Since this site and the source used to create it are hosted on Github, part of
getting everything working involved arranging and populating the proper repository
in the correct manner.  I&amp;rsquo;ve got this working manually for now, but my next task
will be to create a script to automate the deployment of the new pages.  Once that
is stable, I intend to leverage a Continuous Integration tool to automagically
generate and deploy the new pages when I push new source to the repository.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>